import sys
import boto3
import time

import action

class isolate_instance(action.action):

    def create_ir_security_group(self):
        ec2 = boto3.resource('ec2',
            region_name=self.region,
            aws_access_key_id = self.assumedRoleObject['Credentials']['AccessKeyId'],
            aws_secret_access_key = self.assumedRoleObject['Credentials']['SecretAccessKey'],
            aws_session_token = self.assumedRoleObject['Credentials']['SessionToken']
            )

        instance = ec2.Instance(self.instance_id)
        print ("vpc_id identified: %s" %(instance.vpc_id))
        self.old_sg_groups=str(instance.security_groups)
        self.old_sg_groups=self.old_sg_groups.replace("'", '"')

        #Create security group:
        group_name = "IR-isolation-SG-%s" %(self.instance_id)

        self.sg = ec2.create_security_group(
            Description='This security group is created by Incident Response team for the purpose of isolating a compromised EC2 instance',
            GroupName=group_name,
            VpcId=instance.vpc_id,
            DryRun=False
        )

        #Attach security Group to instance
        response = instance.modify_attribute(
            Groups=[
                self.sg.group_id,
            ],
        )

        #revoke egress traffic:
        response = self.sg.revoke_egress(
            DryRun=False,
            GroupId=self.sg.group_id,
            IpPermissions=[
            {
                'FromPort': 1,
                'IpProtocol': '-1',
                'IpRanges': [
                {
                    'CidrIp': '0.0.0.0/0',
                },
                ],
                'ToPort': 65535,    
                },
            ],
            )
        print ("New IR Security Group created: %s" %(self.sg.group_id))
        return

    def create_ami_image(self):
        #Create Image
        ec2 = boto3.resource('ec2',
            region_name=self.region,
            aws_access_key_id = self.assumedRoleObject['Credentials']['AccessKeyId'],
            aws_secret_access_key = self.assumedRoleObject['Credentials']['SecretAccessKey'],
            aws_session_token = self.assumedRoleObject['Credentials']['SessionToken']
            )

        instance = ec2.Instance(self.instance_id)
        
        self.image = instance.create_image(
            Description='This AMI was generated by IR team for forensics purposes',
            DryRun=False,
            Name="Isolated-Instance-%s-ami" %(self.instance_id),
            )
        print ("New AMI Image created: %s" %(self.image.image_id))

        while self.image.state != 'available':
            print ("Image: %s is %s" %(self.image.image_id ,self.image.state))
            time.sleep(10)
            self.image.reload()
        else:
            print ("Image: %s is %s" %(self.image.image_id ,self.image.state))
        return 

    def create_revert_log(self):
        
        revert_log="{\n \"revert_metadata\": [\n {\n \"type\": \"isolate_instance\",\n \"aws_account\": \"" + self.aws_account + "\",\n \"region\": \""+ self.region + "\",\n \"instance_id\": \"" + self.instance_id + "\",\n \"old_sg_groups\": \n\t" + str(self.old_sg_groups) + ",\n \"image_id\": \"" + self.image.image_id + "\",\n \"ir_sg_id\": \"" + self.sg.group_id + "\"\n }\n ]\n }\n"
        
        return revert_log

    def  revert_isolate_instance(self,revert_log):

        self.revert_log=revert_log
        self.assumedRoleObject=self.assume_role(revert_log['aws_account'],self.role)

        print("Running revert_isolate_instance().. ")

        ec2 = boto3.resource('ec2',
            region_name=self.revert_log['region'],
            aws_access_key_id = self.assumedRoleObject['Credentials']['AccessKeyId'],
            aws_secret_access_key = self.assumedRoleObject['Credentials']['SecretAccessKey'],
            aws_session_token = self.assumedRoleObject['Credentials']['SessionToken']
            )
        instance = ec2.Instance(self.revert_log['instance_id'])
    
        #Count number of secuirty groups
        i=0
        for group in self.revert_log['old_sg_groups']: 
            i+=1   
    
        #Create group_ids list to be put back instead of IR Security Group
        group_ids=[0 for x in range(i)]
        i=0
        for group in self.revert_log['old_sg_groups']:
            group_ids[i]=str(group['GroupId'])
            i+=1  

        response = instance.modify_attribute(
            Groups= group_ids, 
        )
        print ("Security Groups attached to instance %s:\n %s" %(self.revert_log['instance_id'],group_ids))

        #remove IR_Group
        ec2 = boto3.client('ec2',
            region_name=self.revert_log['region'],
            aws_access_key_id = self.assumedRoleObject['Credentials']['AccessKeyId'],
            aws_secret_access_key = self.assumedRoleObject['Credentials']['SecretAccessKey'],
            aws_session_token = self.assumedRoleObject['Credentials']['SessionToken']
            )
        response = ec2.delete_security_group(GroupId=self.revert_log['ir_sg_id'])
        print("IR Security Groupd: %s was removed" %(self.revert_log['ir_sg_id']))
        #print ("AWS Response: %s \n" %(response))
        print("AMI: %s was NOT removed" %(self.revert_log['image_id']))
        return

    def isolate_instance(self,instance_id, region, aws_account):
        self.instance_id=instance_id
        self.region=region
        self.aws_account=aws_account
        self.assumedRoleObject=self.assume_role(aws_account,self.role)

        print("Running isolate_instance().. ")
        self.create_ir_security_group()
        self.create_ami_image()
        revert_log =self.create_revert_log() 
        
        return revert_log
    